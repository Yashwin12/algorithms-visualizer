{"version":3,"sources":["commonUtils/Header.js","commonUtils/Boxes.js","searchingVisualiser/LinearSearch.js","commonUtils/Constants.js","commonUtils/LandingPage.js","searchingVisualiser/BinarySearch.js","commonUtils/Node.js","searchingVisualiser/BinarySearchTree.js","App.js","index.js"],"names":["Header","title","className","Boxes","props","state","this","array","map","ele","idx","key","Component","LinearSearch","buttonDisabled","numberFoundAt","message","resetArray","randomArray","prevBoxes","document","getElementsByClassName","getElementById","value","i","length","style","backgroundColor","classList","remove","push","randomNumber","setState","min","max","Math","floor","random","userInput","parseInt","setTimeout","add","type","id","placeholder","onClick","linearSearchOnClick","disabled","resetCurrentViewAndNotArray","LandingPage","scope","to","target","href","BinarySearch","sort","a","b","animations","count","binarySearchAnimations","left","right","middle","numberFound","console","table","resetAllTiles","log","hightlightWithinBounds","start","end","arrayTiles","transition","binarySearchOnClick","Node","rootNodeFound","context","canvasRef","React","createRef","current","getContext","tree","preOrderHelperMethod","drawCircle","xAxis","yAxis","drawLine","parentXAxis","parentYAxis","circleBackgroundColor","circleBorder","fontColor","beginPath","lineWidth","arc","PI","fillStyle","fill","strokeStyle","stroke","font","textAlign","fillText","lineColor","moveTo","lineTo","searchNumber","visualizeSearchNumber","ref","width","window","screen","height","visualizeTree","BinarySearchTree","BST","insert","addNode","searchNodeInTree","BSTReset","currentNode","App","exact","path","component","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.60d914e4.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Header = ( {title} ) => {\n    return (\n        <div>\n            <h2 className=\"mt-3 text-center\"> { title } </h2>\n        </div>\n    );\n}\n\nexport default Header;","import React, { Component } from 'react';\n\nclass Boxes extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {  };\n    }\n    render() {\n        \n        return (\n            <div>\n                {\n                    this.props.array.map( (ele, idx) => (\n                        <div className= \"outer-box\" key = {idx}>\n                            {ele}\n                            <span>{idx}</span>\n                        </div> \n                    ))\n                }                            \n            </div>\n        );\n    }\n}\n\nexport default Boxes;","import React, { Component } from 'react';\nimport Header from '../commonUtils/Header';\nimport Boxes from '../commonUtils/Boxes';\nimport * as myConstClass from '../commonUtils/Constants';\n\nclass LinearSearch extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { \n            buttonDisabled: null,\n            array : [],\n            numberFoundAt : null,\n            message: \"\",          \n         };\n    }\n\n    componentDidMount(){\n        this.resetArray();\n    }\n\n    resetArray(){\n        \n        let randomArray = [];\n        const prevBoxes = document.getElementsByClassName(\"outer-box\"); \n        \n        document.getElementById(\"userInput\").value = \"\";\n\n        for ( let i = 0; i < prevBoxes.length; i++ ){\n            prevBoxes[i].style.backgroundColor = myConstClass.DEFAULT_BOX_COLOR;\n            prevBoxes[i].classList.remove(\"highlight\");\n        }\n\n        for ( let i = 0; i < myConstClass.TOTAL_ARRAY_SIZE; i++ ){                        \n            randomArray.push( this.randomNumber( myConstClass.STARTING_ARRAY_RANGE, myConstClass.ENDING_ARRAY_RANGE ) );\n        }\n        this.setState( { array : randomArray } ); \n    }\n\n    // method to generate random number  \n    randomNumber(min, max) {  \n        return Math.floor(Math.random() * (max - min) + min); \n    }\n    \n    linearSearchOnClick(){\n        let userInput = document.getElementById(\"userInput\").value;\n        \n        if( !userInput )\n            return;\n\n        let message = \"Number not found\";\n        \n        this.setState( { buttonDisabled: true } );\n        let numberFoundAt = null\n        \n        const prevBoxes = document.getElementsByClassName(\"outer-box\");\n\n        for( let idx = 0; idx < this.state.array.length; idx++ ) {\n            \n            if( this.state.array[idx] ===  parseInt(userInput) ){\n                \n                message = \"Found number at: \" ;\n                numberFoundAt = idx;\n\n                setTimeout(() => {\n                    prevBoxes[idx].style.backgroundColor = myConstClass.NUMBER_FOUND_BOX_COLOR;\n                    prevBoxes[idx].classList.add(\"grow-find\");\n                    prevBoxes[idx].classList.add(\"highlight\");\n                }, idx * myConstClass.LINEAR_ANIMATION_SPEED_SECONDS * 1000);\n                \n                break;                \n            }\n            else{\n                setTimeout(() => {\n                    prevBoxes[idx].style.backgroundColor = myConstClass.VISITED_BOX_COLOR;\n                    prevBoxes[idx].classList.add(\"grow-find\");\n                    // prevBoxes[idx].classList.add(\"highlight\");\n\n                }, idx * myConstClass.LINEAR_ANIMATION_SPEED_SECONDS * 1000);\n            }\n        }\n\n        this.setState( { buttonDisabled: false, numberFoundAt, message } );\n    }\n\n    resetCurrentViewAndNotArray() {        \n        document.getElementById(\"userInput\").value = \"\";\n        this.setState({ message : \"\", numberFoundAt: null });\n\n        const prevBoxes = document.getElementsByClassName(\"outer-box\"); \n    \n        for ( let i = 0; i < prevBoxes.length; i++ ){\n            prevBoxes[i].style.backgroundColor = myConstClass.DEFAULT_BOX_COLOR;\n            prevBoxes[i].classList.remove(\"highlight\");\n        }        \n    }\n\n    render() {\n        const { buttonDisabled, array, numberFoundAt, message } = this.state;\n\n        return (\n            <div>\n                <Header title = \"Linear Search\" />\n\n                <div className=\"input-group col-xl-11 container justify-content-center\">\n\n                    {/*Input bar */}\n                    <input \n                        type=\"number\" \n                        id=\"userInput\" \n                        className=\"form-control col-xl-3\" \n                        placeholder=\"Please enter number\"\n                    />\n\n                    {/*Search btn */}\n                    <button\n                        type=\"button\"\n                        onClick={ () => this.linearSearchOnClick() }\n                        className=\"btn btn-success col-xl-1\"\n                        id=\"search-button\"\n                        disabled={ buttonDisabled }\n                    >\n                        Search\n                    </button>\n\n                    {/* Reset button */}\n                    <button\n                        onClick={ () => this.resetCurrentViewAndNotArray() }\n                        className=\"btn btn-dark col-xl-1\"\n                        type=\"button\"\n                        id=\"binarySearchReset\"\n                        disabled={ buttonDisabled }\n                    > \n                        Reset\n                    </button>\n                                    \n                    {/* Reset Array */}\n                    <button\n                        type=\"button\"\n                        onClick={ () => this.resetArray() }\n                        className=\"btn btn-danger col-xl-1\"\n                        id=\"reset-button\"\n                        disabled={ buttonDisabled }\n                    >\n                        Reset Array\n                    </button>\n                \n                </div>            \n\n                {/* { numberFoundAt != null ? \n                    (\n                        <div> \n                            <label className=\"number-found-msg font-weight-bold\">{message}</label>\n                            <label className = \"font-weight-bold\"> {numberFoundAt} </label>\n                        </div>                        \n                    ) :\n                    (\n                        <label className=\"number-not-found-msg font-weight-bold\">{message}</label>\n                    ) \n                }     */}\n\n                 {/* Final Boxes */}                                \n                <Boxes\n                    array = {array}\n                    type = \"LinearSearch\"\n                />\n\n            </div>\n        );\n    }\n}\n\nexport default LinearSearch;","export const DEFAULT_BOX_COLOR = \"#FFFF00\";\nexport const VISITED_BOX_COLOR = \"#DDA0DD\";\nexport const NUMBER_FOUND_BOX_COLOR = \"#008000\";\nexport const NOT_FOUND_COLOR = \"#DDA0DD\";\n\nexport const BINARY_ANIMATION_SPEED_SECONDS = 3;\nexport const LINEAR_ANIMATION_SPEED_SECONDS = 0.2;\n\nexport const TOTAL_ARRAY_SIZE = 20;\n\nexport const STARTING_ARRAY_RANGE = 5;\nexport const ENDING_ARRAY_RANGE = 999;\n\nexport const SECOND_LEVEL_NODE_X_AXIS = 450; // This is used to keep the second level more far away from the root node.\nexport const SECOND_LEVEL_NODE_Y_AXIS = 80;\n\nexport const DISTANCE_BETWEEN_NODES = 80;\n\n","import React, { Component } from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nclass LandingPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n\n    return (\n      <div>\n        <h1> Happy Visualization! </h1>\n        <br />\n        <table className=\"table table-striped\">\n          <thead className=\"thead-dark\">\n            <tr>\n              <th scope=\"col\">#</th>\n              <th scope=\"col\">Algorithm Visualiser</th>\n              <th scope=\"col\">Algorithm Type</th>\n              <th scope=\"col\">Average Time Complexity</th>\n              <th scope=\"col\">Average Space Complexity</th>\n              <th scope=\"col\">External Reference</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td scope=\"row\">1</td>\n              <NavLink to=\"/linear-search\">Linear Search</NavLink>\n              <td>Searching</td>\n              <td>O(n)</td>\n              <td>O(1)</td>\n              <a\n                target=\"_blank\"\n                href=\"https://www.tutorialspoint.com/data_structures_algorithms/linear_search_algorithm.htm\"\n              >\n                Linear Search\n              </a>\n            </tr>\n\n            <tr>\n              <td scope=\"row\">2</td>\n              <NavLink to=\"/binary-search\">Binary Search</NavLink>\n              <td>Searching</td>\n              <td>O(n)</td>\n              <td>O(log(n))</td>\n              <a\n                target=\"_blank\"\n                href=\"https://www.tutorialspoint.com/data_structures_algorithms/binary_search_algorithm.htm\"\n              >\n                Binary Search\n              </a>\n            </tr>\n\n            <tr>\n              <td scope=\"row\">3</td>\n              <NavLink to=\"/binary-search-tree\">Binary Search Tree</NavLink>\n              <td>Searching</td>\n              <td>O(log(n))</td>\n              <td>O(n)</td>\n              <a\n                target=\"_blank\"\n                href=\"https://www.tutorialspoint.com/data_structures_algorithms/binary_search_tree.htm\"\n              >\n                Binary Search Tree\n              </a>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default LandingPage;\n","import React, { Component } from 'react';\nimport Header from '../commonUtils/Header';\nimport Boxes from '../commonUtils/Boxes';\nimport * as myConstClass from '../commonUtils/Constants';\n\nclass BinarySearch extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { \n            buttonDisabled: null,\n            array : [],\n            numberFoundAt : null,\n            message: \"\",          \n         };\n    }\n\n    componentDidMount() {\n        this.resetArray();\n    }\n\n    resetArray(){\n        \n        let randomArray = [];\n        const prevBoxes = document.getElementsByClassName(\"outer-box\"); \n        \n        document.getElementById(\"userInputBinary\").value = \"\";\n\n        for ( let i = 0; i < prevBoxes.length; i++ ){\n            prevBoxes[i].style.backgroundColor = myConstClass.DEFAULT_BOX_COLOR;\n            prevBoxes[i].classList.remove(\"highlight\");\n            prevBoxes[i].classList.remove(\"growFind\");\n        }\n\n        for ( let i = 0; i < myConstClass.TOTAL_ARRAY_SIZE; i++ ){                        \n            randomArray.push( this.randomNumber( myConstClass.STARTING_ARRAY_RANGE, myConstClass.ENDING_ARRAY_RANGE ) );\n        }\n        randomArray.sort( (a,b) =>{\n            return a - b; \n        });\n        \n        this.setState( { array : randomArray } ); \n    }\n\n    // method to generate random number  \n    randomNumber(min, max) {  \n        return Math.floor(Math.random() * (max - min) + min); \n    }\n    \n    binarySearchOnClick(){\n        let userInput = document.getElementById(\"userInputBinary\").value;\n        \n        if( !userInput )\n            return;\n\n        const prevBoxes = document.getElementsByClassName(\"outer-box\");        \n        let animations = []; // Conists of left, right, mid and numberFound\n        let count = 0;\n\n        this.setState( { buttonDisabled: true } );\n\n        this.binarySearchAnimations(0, this.state.array.length - 1, parseInt(userInput), animations);\n\n        while ( count < animations.length ){\n\n            const [left, right, middle, numberFound] = animations[count];\n            console.table( {left, right, middle, numberFound} );\n            \n            if( count === animations.length - 1 && numberFound ===true ){\n                setTimeout(() => {\n                    this.setState({ numberFoundAt: middle, message : \"Number found at: \" });\n\n                    this.resetAllTiles(prevBoxes);\n                \n                    prevBoxes[middle].style.backgroundColor = myConstClass.NUMBER_FOUND_BOX_COLOR;\n                    prevBoxes[middle].classList.add(\"grow-find\");\n                    prevBoxes[middle].classList.add(\"highlight\");\n    \n                }, ( count + 1 ) * 1000 * myConstClass.BINARY_ANIMATION_SPEED_SECONDS );                 \n                \n            }\n\n            else if ( count === animations.length - 1 && numberFound === false ) {\n                setTimeout(() => {\n                    console.log(\"Number not found\");\n                    this.setState({\n                        message: `Number not found`\n                    });\n                    this.resetAllTiles(prevBoxes);\n                }, (count + 1) * myConstClass.BINARY_ANIMATION_SPEED_SECONDS * 1000);\n            }\n\n            setTimeout(() => {\n                this.resetAllTiles(prevBoxes);\n                this.hightlightWithinBounds(left, right, prevBoxes);\n            }, count * 1000 * myConstClass.BINARY_ANIMATION_SPEED_SECONDS);\n            count++;\n            \n        } // end of for loop\n\n        setTimeout(() => {\n            this.setState({ buttonDisabled: false });\n        }, count * 1000 * myConstClass.BINARY_ANIMATION_SPEED_SECONDS);\n\n    } //end of binarySearchOnClick() method\n\n    binarySearchAnimations( left, right, userInput, animations ){\n\n        while ( left <= right ){\n            let middle = Math.floor( left + (right - left) /2 ); // This is preferred over let middle = (left + right) / 2;\n\n            if( this.state.array[middle] === userInput ){                \n                animations.push( [left, right, middle, true] );               \n                break;            \n            }         \n            else if ( this.state.array[middle] > userInput ) {\n                animations.push( [left, right, middle, false] );\n                right = middle - 1;\n            }\n            else {\n                animations.push( [left, right, middle, false]) ;\n                left = middle + 1;\n            }\n        }      \n    }\n\n    hightlightWithinBounds(start, end, arrayTiles) {\n        for (let i = start; i <= end; i++) {\n            arrayTiles[i].style.backgroundColor = myConstClass.NOT_FOUND_COLOR;\n            arrayTiles[i].style.transition = \"100ms all\";\n        }\n    }\n\n    resetAllTiles(arrayTiles) {\n        for (let i = 0; i < arrayTiles.length; i++) {\n            arrayTiles[i].style.backgroundColor = myConstClass.DEFAULT_BOX_COLOR;\n            arrayTiles[i].classList.remove(\"highlight\");\n            arrayTiles[i].style.transition = \"100ms all\";\n        }\n    }\n\n    resetCurrentViewAndNotArray() {        \n        document.getElementById(\"userInputBinary\").value = \"\";\n        this.setState({ message : \"\", numberFoundAt: null });\n        this.resetAllTiles( document.getElementsByClassName(\"outer-box\") );\n    }\n\n    render() {\n        const { buttonDisabled, array, numberFoundAt, message } = this.state;\n\n        return (\n            <div>\n\n                <Header title = \"Binary Search\" />\n                 \n                <div className=\"input-group col-xl-11 container justify-content-center\">\n\n                    {/*Input bar */}\n                    <input \n                        type=\"number\" \n                        id=\"userInputBinary\" \n                        className=\"form-control col-xl-3\" \n                        placeholder=\"Please enter number\"\n                    />      \n\n                     {/*Search btn */}\n                    <button\n                        type=\"button\"\n                        onClick={ () => this.binarySearchOnClick() }\n                        className=\"btn btn-success col-xl-1\"\n                        id=\"search-button\"\n                        disabled={ buttonDisabled }\n                    >\n                        Search\n                    </button>           \n\n                    {/* Reset button */}\n                    <button\n                        onClick={ () => this.resetCurrentViewAndNotArray() }\n                        className=\"btn btn-dark col-xl-1\"\n                        type=\"button\"\n                        id=\"binarySearchReset\"\n                        disabled={ buttonDisabled }\n                    > \n                        Reset\n                    </button>\n                                                       \n                    {/* Reset Array */}\n                    <button\n                        type=\"button\"\n                        onClick={ () => this.resetArray() }\n                        className=\"btn btn-danger col-xl-1\"\n                        id=\"reset-button\"\n                        disabled={ buttonDisabled }\n                    >\n                        Reset Array\n                    </button>\n\n                </div>                \n                \n                { numberFoundAt != null ? \n                    (\n                        <div> \n                            <label className=\"number-found-msg font-weight-bold\">{message}</label>\n                            <label className = \"font-weight-bold\"> {numberFoundAt} </label>\n                        </div>                        \n                    ) :\n                    (\n                        <label className=\"number-not-found-msg font-weight-bold\">{message}</label>\n                    ) \n                }\n        \n                 {/* Final Boxes */}\n                <Boxes\n                    array = {array}\n                    type = \"BinarySearch\"\n                />\n\n            </div>\n        );\n    }\n}\n\nexport default BinarySearch;","import React, { Component, useRef } from \"react\";\nimport shallowCompare from 'react-addons-shallow-compare'; // ES6\n\nclass Node extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { \n            rootNodeFound : false,\n            context: null\n         };\n        this.canvasRef = React.createRef();      \n    }\n\n    componentDidMount() {        \n        this.setState( { context: this.canvasRef.current.getContext('2d') } ) // We would be setting the context once in the state and then refer it elsewhere.  \n    }\n\n    visualizeTree( tree ){\n        this.preOrderHelperMethod ( tree );        \n    }\n\n    preOrderHelperMethod ( tree ){\n\n        this.drawCircle( tree.xAxis, tree.yAxis, tree.value, \"white\", \"black\", \"black\" );\n\n        if( tree.left != null ){\n            this.drawLine( tree.left.xAxis, tree.left.yAxis, tree.left.parentXAxis, tree.left.parentYAxis, \"black\");\n            this.preOrderHelperMethod ( tree.left );  \n        }  \n        \n        if( tree.right != null ){\n            this.drawLine( tree.right.xAxis, tree.right.yAxis, tree.right.parentXAxis, tree.right.parentYAxis, \"black\");\n            this.preOrderHelperMethod ( tree.right );  \n        }   \n    }\n\n    drawCircle( xAxis, yAxis, value, circleBackgroundColor, circleBorder, fontColor ){\n        \n        var context = this.state.context;\n\n        context.beginPath();\n        context.lineWidth = 5;\n\n        // arc( x, y, circle's radius, startingAngle, endingAngle, counterClockWise )\n        context.arc( xAxis, yAxis, 20, 0, 2 * Math.PI, true);  \n\n        context.fillStyle = circleBackgroundColor;\n        context.fill();       \n        context.strokeStyle = circleBorder;\n        context.stroke();\n\n        // ******************* This is for the text inside the circle ****************************\n        context.beginPath()\n        context.font = \"15px Arial\"\n        context.fillStyle = fontColor;\n        context.fill();\n        context.textAlign = \"center\";\n        context.fillText(value, xAxis, yAxis + 5)\n        context.stroke();\n    }\n\n    drawLine( xAxis, yAxis, parentXAxis, parentYAxis, lineColor ){\n\n        var context = this.state.context;   \n        // Reset the current path\n        context.beginPath(); \n        // Staring point (x1,y1)\n        context.moveTo(parentXAxis - 5, parentYAxis + 20);        \n        // End point (x2,y2)\n        context.lineTo(xAxis,yAxis - 20 );\n        // Line color       \n        context.strokeStyle = lineColor;\n        // Make the line visible\n        context.stroke();        \n    }\n\n    visualizeSearchNumber( tree, searchNumber ){\n        \n        this.drawCircle( tree.xAxis, tree.yAxis, tree.value, \"red\", \"red\", \"white\");\n        \n        // This is for the circle animation...\n        setTimeout(() => {\n            this.drawCircle( tree.xAxis, tree.yAxis, tree.value, \"white\", \"red\", \"red\" );          \n        }, 500 );     \n\n        if ( tree.value == searchNumber ){\n            setTimeout(() => {\n                this.drawCircle( tree.xAxis, tree.yAxis, tree.value, \"green\", \"black\", \"white\" );          \n            }, 1500 );            \n        }        \n        else if ( tree.value > searchNumber && tree.left != null ){\n            // Go left \n\n            setTimeout(() => {                \n                this.drawLine( tree.left.xAxis, tree.left.yAxis, tree.left.parentXAxis, tree.left.parentYAxis, \"red\");                         \n                return this.visualizeSearchNumber( tree.left, searchNumber );\n            }, 1500 );               \n        }\n        else if( tree.value < searchNumber && tree.right != null ) {\n            // Go right            \n            \n            setTimeout(() => {              \n                this.drawLine( tree.right.xAxis, tree.right.yAxis, tree.right.parentXAxis, tree.right.parentYAxis, \"red\");           \n                return this.visualizeSearchNumber( tree.right, searchNumber );\n            }, 1500 );        \n        }\n    }\n\n    render() {\n        let { tree, searchNumber } = this.props;\n\n        if( tree == null )\n            return;\n\n        return (\n            <span>                                                              \n                <canvas ref = {this.canvasRef} width={window.screen.width} height={window.screen.height} />\n                { this.state.context != null && this.visualizeTree(tree) }  \n                { searchNumber != null && this.visualizeSearchNumber( tree, searchNumber ) }  \n            </span>\n        );\n    }\n}\n\nexport default Node;","import React, { Component } from \"react\";\n\nimport Header from \"../commonUtils/Header\";\nimport * as myConstClass from \"../commonUtils/Constants\";\nimport Node from \"../commonUtils/Node\";\n\nclass BinarySearchTree extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        tree : null,       // Consists of value, left, right, xAxis, yAxis, parentXAxis, parentYAxis properties\n        searchNumber: null\n    };\n  }\n\n  addNode(){ \n    let userInput = parseInt( document.getElementById(\"userInput\").value );    \n\n    if( !userInput && userInput != 0 )\n        return;\n\n    let tree = this.state.tree;\n\n    if( tree == null ){\n        // Tree is empty, so we can blindly create new tree from the userInput. The current userInput would be the root node.         \n        tree = new BST(userInput, Math.floor(window.screen.width / 2), Math.floor(window.screen.height / 5), null, null );\n    }\n    else{\n        // There is at least one node present, so we can directly call insert method of BST.        \n        tree.insert(userInput);\n    }\n\n    this.setState( { tree } );\n  }\n\n  BSTReset() {\n    document.getElementById(\"userInput\").value = \"\";\n    this.setState( { tree: null });\n  }\n\n  searchNodeInTree() {\n\n    let searchNumber = parseInt( document.getElementById(\"userInput\").value );  \n\n    if( !searchNumber && searchNumber != 0 )\n      return;\n\n      this.setState({ searchNumber });\n  }\n\n  render() {\n      let { tree, searchNumber } = this.state;\n    return (\n      <div>\n        <Header title=\"Binary Search Tree\" />\n\n        <div className=\"input-group col-xl-11 container justify-content-center\">\n          {/*Input bar */}\n          <input\n            type=\"number\"\n            id=\"userInput\"\n            className=\"form-control col-xl-3\"\n            placeholder=\"Please enter number\"\n          />\n\n          {/*Add btn */}\n          <button\n            type=\"button\"\n            onClick={() => this.addNode()}\n            className=\"btn btn-success col-xl-1\"\n            id=\"search-button\"\n            // disabled={buttonDisabled}\n          >\n            Add\n          </button>\n\n          {/*Search btn */}\n          <button\n            type=\"button\"\n            onClick={() => this.searchNodeInTree()}\n            className=\"btn btn-success col-xl-1\"\n            id=\"search-button\"\n            // disabled={buttonDisabled}\n          >\n            Search\n          </button>\n\n          {/*Reset btn */}\n          <button\n            type=\"button\"\n            onClick={() => this.BSTReset()}\n            className=\"btn btn-danger col-xl-1\"\n            id=\"search-button\"\n            // disabled={buttonDisabled}\n          >\n            Reset\n          </button>\n        </div>\n        <br/>\n\n        {/* Final Tree */}\n        {\n          tree != null ? \n          (                \n            <Node className=\"number-found-msg font-weight-bold\" tree = {tree} searchNumber = {searchNumber} />\n          ) :\n          (\n            <label className=\"number-not-found-msg font-weight-bold\">Please enter an element</label>\n          ) \n        }        \n        \n      </div>\n    );\n  }\n}\n\nclass BST {    \n    constructor( value, xAxis, yAxis, parentXAxis, parentYAxis ){\n        this.value = value;\n        this.left = null;\n        this.right = null;\n        this.xAxis = xAxis;\n        this.yAxis = yAxis;\n        this.parentXAxis = parentXAxis;\n        this.parentYAxis = parentYAxis;\n    }\n\n    insert( value ) {\n        let currentNode = this;\n\n        while ( currentNode != null ){\n            if ( currentNode.value > value ){\n                // Go to the left side of tree\n\n                if( currentNode.left == null ){\n                   \n                    if( currentNode.parentXAxis == null || currentNode.parentYAxis == null ){\n                      // This would be second level node\n                      currentNode.left = new BST(value, this.xAxis - myConstClass.SECOND_LEVEL_NODE_X_AXIS, this.yAxis + myConstClass.SECOND_LEVEL_NODE_Y_AXIS, this.xAxis, this.yAxis );\n                    }\n                    else{\n                      currentNode.left = new BST(value, currentNode.xAxis - myConstClass.DISTANCE_BETWEEN_NODES, currentNode.yAxis + myConstClass.DISTANCE_BETWEEN_NODES, currentNode.xAxis, currentNode.yAxis );\n                    }\n                    \n                    break;\n                }\n                currentNode = currentNode.left;\n            }   \n            else { \n                // Go to the right side of tree\n                if( currentNode.right == null ){\n\n                    if( currentNode.parentXAxis == null || currentNode.parentYAxis == null ){\n                      // This would be second level node\n                      currentNode.right = new BST(value, this.xAxis + myConstClass.SECOND_LEVEL_NODE_X_AXIS, this.yAxis + myConstClass.SECOND_LEVEL_NODE_Y_AXIS, this.xAxis, this.yAxis );\n                    }\n                    else{\n                      currentNode.right = new BST(value, currentNode.xAxis + myConstClass.DISTANCE_BETWEEN_NODES, currentNode.yAxis + myConstClass.DISTANCE_BETWEEN_NODES, currentNode.xAxis, currentNode.yAxis );\n                    }\n\n                    break;                    \n                }\n                currentNode = currentNode.right;\n            }    \n        }\n        return this;\n    }\n}\n\nexport default BinarySearchTree;\n","import React from 'react';\nimport { Route, Switch, BrowserRouter as Router } from \"react-router-dom\";\n\nimport LinearSearch from '../src/searchingVisualiser/LinearSearch'\nimport LandingPage from '../src/commonUtils/LandingPage'\nimport BinarySearch from '../src/searchingVisualiser/BinarySearch'\nimport BinarySearchTree from '../src/searchingVisualiser/BinarySearchTree'\n\n\nfunction App() {  \n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch> \n          <Route exact path = \"/\" component = {LandingPage} />\n          <Route path = \"/linear-search\" component = {LinearSearch} />       \n          <Route path = \"/binary-search\" component = {BinarySearch} />\n          <Route path = \"/binary-search-tree\" component = {BinarySearchTree} />   \n          <Route path=\"*\" component = {LandingPage} />          \n        </Switch>        \n      </Router>      \n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}